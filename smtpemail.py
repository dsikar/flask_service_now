# -*- coding: utf-8 -*-
"""SMTPEmail.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-VFEqD1olUKLC5tTM8xaEP-8H_6fHcUI
"""

import smtplib

from string import Template

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

import json
import subprocess

with open("/home/ubuntu/flaskapp/priority.txt", 'r', encoding='utf-8') as priority:
  pri_iter = priority.read()
pri_iter = int(pri_iter)
pri_iter = pri_iter + 1
if (pri_iter > 24):
  pri_iter = 1
with open('/home/ubuntu/flaskapp/priority.txt', 'w') as file:
  file.write(str(pri_iter))

def re_prioritize(priority):
  ret_pri = 0
  if priority == 1:
    ret_pri = 1
  elif priority == 2:
    ret_pri = 3
  elif priority == 3:
    ret_pri = 12
  else:
    ret_pri = 24
  return ret_pri

SEND_FROM = 'rnd.sunbury.partsearch@gmail.com'
EMAIL_PWD = 'jcisearch2022'

def get_users_data(file_name):
  user_id = []
  user_email = []
  user_mfr_part_num = []
  user_alt_jci_num = []
  user_jci_part_num = []
  user_part_priority = []
  user_part_qty = []
  user_incl_brokers = []
  
  with open(file_name, mode='r') as user_file:
    next(user_file)
    for user_info in user_file:
      user_id.append(user_info.split(',')[0])
      user_email.append(user_info.split(',')[1])
      user_mfr_part_num.append(user_info.split(',')[2])
      user_alt_jci_num.append(user_info.split(',')[3])
      user_jci_part_num.append(user_info.split(',')[4])
      user_part_priority.append(user_info.split(',')[5])      
      user_part_qty.append(user_info.split(',')[6])
      user_incl_brokers.append(user_info.split(',')[7])

  return user_id, user_email, user_mfr_part_num, user_alt_jci_num, user_jci_part_num, user_part_priority, user_part_qty, user_incl_brokers

def read_template(file_name):
  with open(file_name, 'r', encoding='utf-8') as msg_template:
      msg_template_content = msg_template.read()
  return Template(msg_template_content)

def define_bashscript(mft_part_num, incl_brokers):
  import io

  lines = ""

  with io.open("/home/ubuntu/flaskapp/script.sh", "r", newline=None) as fd:
    for line in fd:
      line = line.replace("\n", "")
      lines = lines + line
  
  lines = lines.replace("MFR_PART_NUM", mft_part_num.upper())
  lines = lines.replace("INCL_BROKERS", incl_brokers.lower())

  with open('/home/ubuntu/flaskapp/script_mod.sh', 'w') as file:
    file.write(lines)

def process_APIQuery(mfr_num, reqd_qty):
  import json
  import subprocess

  total_inv = 0
  send_email = 0
  message = ""

  # Opening JSON file
  f = open('/home/ubuntu/flaskapp/results.json')
  data = json.load(f)
  f.close()

  if "errors" in data:
    error_data = data['errors'][0]
    error_msg = error_data['message']
    send_email = 1
    message = "ERROR!: " + error_msg
    return send_email, message

  mydict = data['data']['search']['results']

  if (mydict == None):
    send_email = 1
    message = "Part number return null. Check part number again..."
    return send_email, message
  
  mydict = data['data']['search']['results'][0]

  if (mydict['part']['mpn'].upper() != mfr_num.upper()):
    print(mydict['part']['mpn'])
    print(mfr_num)
    send_email = 1
    message = "Part number error. Check part number again..."
    return send_email, message

  mysellers = mydict['part']['sellers']

  # clear results
  # python 3.8.10
  #result = subprocess.run(["rm", "output.txt"], stderr=subprocess.PIPE, text=True)
  # python 3.6.9
  result = subprocess.run(["rm", "/home/ubuntu/flaskapp/output.txt"], stderr=subprocess.PIPE, universal_newlines=True)
  print(result.stderr)
  #!rm output.txt
  f = open("/home/ubuntu/flaskapp/output.txt", "a")

  mylevel = reqd_qty
  mpn = mydict['part']['mpn']
  mftr = mydict['part']['manufacturer']['name']
  f.write("Parts search complete. Inventory found!\n")
  f.write("\n")
  f.write('*** SEARCH ***\n')
  # mystr = 'Part Number: {}, Manufacturer: {}'.format(mpn, mftr)
  f.write(('Part Number: {}, Manufacturer: {}\n'.format(mpn, mftr)))
  f.write("\n")
  for i in range (0, len(mysellers)):    
    for j in range (0, len(mysellers[i]['offers'])):
      total_inv = total_inv + mysellers[i]['offers'][j]['inventory_level']

  print("Total inventory: " + str(total_inv))

  if (total_inv >= mylevel):
    for i in range (0, len(mysellers)):
      #print(len(mysellers[i]['offers']))
      for j in range (0, len(mysellers[i]['offers'])):          
        f.write('*** SELLER ***')
        f.write("\n")
        f.write(mysellers[i]['company']['name'])
        f.write("\n")
        f.write("Click URL: " + mysellers[i]['offers'][j]['click_url'])
        f.write("\n")
        f.write("Inventory level: " + str(mysellers[i]['offers'][j]['inventory_level']))
        f.write("\n")
        f.write("Updated: " + mysellers[i]['offers'][j]['updated'])
        f.write("\n")
        f.write('**************\n')
        f.write("\n")
    f.write("\n")
    f.write("Total inventory: " + str(total_inv))
  else:
    send_email = 2    
  
  f.close()
  result = subprocess.run(["cat", "/home/ubuntu/flaskapp/output.txt"], stderr=subprocess.PIPE, universal_newlines=True) # python 3.8.10 text=True)
  print(result.stderr)
  #!cat output.txt

  return send_email, message

user_id, user_email, user_mfr, user_alt, user_jci, user_pri, user_qty, user_brok = get_users_data('/home/ubuntu/flaskapp/live-search.csv')

message_template = read_template('/home/ubuntu/flaskapp/email.txt')

# set up the SMTP server
smtplib_server = smtplib.SMTP(host='smtp.gmail.com', port=587)
smtplib_server.starttls()
smtplib_server.login(SEND_FROM, EMAIL_PWD)

# Get each user detail and send the email:
for id, email, mfr_num, alt_num, jci_num, pri, qty, broker in zip(user_id, user_email, user_mfr, user_alt, user_jci, user_pri, user_qty, user_brok):
  priority_iter = re_prioritize(int(pri))

  query_msg = ""
  
  # print(priority_iter)
  # print(pri_iter)
  # print(pri_iter % priority_iter)
  print("pri_iter: {}, priority_iter: {}, pri_iter % priority_iter: ".format(str(pri_iter), str(priority_iter), (pri_iter % priority_iter)))
  if (pri_iter % priority_iter == 0):    
    define_bashscript(mfr_num.upper(), broker)

    result = subprocess.run(["bash", "/home/ubuntu/flaskapp/script_mod.sh"], stderr=subprocess.PIPE, universal_newlines=True) # python 3.8.10 text=True)
    print(result.stderr)

    send_email, query_msg = process_APIQuery(mfr_num, int(qty))    

    email_lst = email[0].split(';')

    print(send_email)
    print(query_msg)

    if (send_email == 0):

      for eml in email_lst:
        multipart_message = MIMEMultipart()       # create a message
      
        with open("/home/ubuntu/flaskapp/output.txt", 'r', encoding='utf-8') as output_file:
          search_str = output_file.read()

        # add in the actual person name to the message template
        msg = message_template.substitute(OCTOPART_ID=id.upper(), MFR_PART=mfr_num.upper(), SEARCH_RESULT=search_str)

        # Prints out the message body for our sake
        print(msg)

        # setup the parameters of the message
        multipart_message['From']=SEND_FROM
        multipart_message['To']=email
        if jci_num == "":
          multipart_message['Subject']="JCI Parts Search Request " + alt_num + " - DO NOT REPLY"
        else:
          multipart_message['Subject']="JCI Parts Search Request " + jci_num + " - DO NOT REPLY"
        
        # add in the message body
        multipart_message.attach(MIMEText(msg, 'plain'))
        
        # send the message via the server set up earlier.
        smtplib_server.send_message(multipart_message)
        del multipart_message

    elif (send_email == 1):
      print("Error in API call request...")

      for eml in email_lst:
        multipart_message = MIMEMultipart()       # create a message

        msg = message_template.substitute(OCTOPART_ID=id.upper(), MFR_PART=mfr_num.upper(), SEARCH_RESULT=query_msg)
        print(msg)

        multipart_message['From']=SEND_FROM
        multipart_message['To']=email
        if jci_num == "":
          multipart_message['Subject']="JCI Parts Search Request " + alt_num + " - DO NOT REPLY"
        else:
          multipart_message['Subject']="JCI Parts Search Request " + jci_num + " - DO NOT REPLY"

        # add in the message body
        multipart_message.attach(MIMEText(msg, 'plain'))  

        # send the message via the server set up earlier.
        smtplib_server.send_message(multipart_message)        
        del multipart_message

    elif (send_email == 2):
      print("Not enough quantity available for part. Processing next request...")

    else:
      print("Unknown error. Look into code!!!")

  else:
    print("Prioritized for later. Processing next request...")

# Terminate the SMTP session and close the connection
smtplib_server.quit()
